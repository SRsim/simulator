
#include <cmath>
#include <new>
#include <assert.h>
#include <stdio.h>
#include "ssd.h"
#include <sys/mman.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>

using namespace ssd;

/* use caution when editing the initialization list - initialization actually
 * occurs in the order of declaration in the class definition and not in the
 * order listed here */
RaidwithParity::RaidwithParity(uint ssd_size):
	size(ssd_size)
{
/*
 * Idea
 *
 * Create the instances of the SSDs.
 *
 * Techniques
 *
 * 1. Striping
 * 2. Address splitting.
 * 3. Complete control
 */
	Ssds = new Ssd[RAID_NUMBER_OF_PHYSICAL_SSDS];

	return;
}

RaidwithParity::~RaidwithParity(void)
{
	return;
}

double RaidwithParity::event_arrive(enum event_type type, ulong logical_address, uint size, double start_time)
{
	return event_arrive(type, logical_address, size, start_time, NULL);
}

/* This is the function that will be called by DiskSim
 * Provide the event (request) type (see enum in ssd.h),
 * 	logical_address (page number), size of request in pages, and the start
 * 	time (arrive time) of the request
 * The SSD will process the request and return the time taken to process the
 * 	request.  Remember to use the same time units as in the config file. */
double RaidwithParity::event_arrive(enum event_type type, ulong logical_address, uint size, double start_time, void *buffer)
{
	/*
	if (type == WRITE)
		printf("Writing to logical address: %lu\n", logical_address);
	else if (type == READ)
		printf("Read from logical address: %lu\n", logical_address);
	*/


	if (PARALLELISM_MODE == 2) // Splitted address space
	{
					int event_received_SSD = logical_address%RAID_NUMBER_OF_PHYSICAL_SSDS;
					//printf("\t ** logical_address %lu \n", logical_address);

					printf("** Address = %lu, SSD %i event_arrive call\n", logical_address, event_received_SSD);
					printf("**********************************\n");

					return Ssds[logical_address%RAID_NUMBER_OF_PHYSICAL_SSDS].event_arrive(type, logical_address, size, start_time, (char*)buffer);
	}

	return 0;
}

/*
 * Returns a pointer to the global buffer of the Ssd.
 * It is up to the user to not read out of bound and only
 * read the intended size. i.e. the page size.
 */
void *RaidwithParity::get_result_buffer()
{
	return global_buffer;
}

void RaidwithParity::print_statistics()
{
	for (int i=0;i<RAID_NUMBER_OF_PHYSICAL_SSDS;i++)
		{
			printf ("%u %s",i, " th SSD \n");
			Ssds[i].print_statistics();
		}

}
